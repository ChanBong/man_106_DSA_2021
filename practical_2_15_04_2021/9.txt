A. Conversion of infix to postfix :
    1. Scan form left to right
    2. If the element is an operand, output it
    3. Else check the precedence of the scanned operator
        a. If it is greater or equal than the element already on the stack or the stack is empty, oush this operator on the stack
        b. Else, pop all the operators from the stack which are greater in precedence and then push this operator
    4. If the scanned character is '(', push it on the stack
    5. Else if the scanned character is ')', pop all the values until a '(' is reached . Pop this '(' too.
    6. Loop through 2-6 until the stack is empty
    7. Pop out all the remaining values in the stack, after the output
    8. Exit

B. Conversion from infix to prefix
    1. Reverse the given infix expression
    2. Convert this reversed infix expression into postfix form
    3. Reverse the expression obtained in 2 and print it
    4. Exit

C. Evaluation of postfix expression
    1. Scan the expression from left to right
    2. If the elemant is operand push it to stack
    3. Else if the elemant is operator:
        a. Pop two elements from stack
        b. perform the operation using the operator in hand
        c. push the expression to the stack
    4. Repeat step 2-3 until the end of expression is reached
    5. Exit

D. Evaluation of postfix expression
    1. Reverse the given expression
    2. Convert the reversed expression to infix by using postfix to infix converison
    3. Reverse the expression obtained in step 2 an print it
    4. Exit


5. Infix to postfix conversion :

(i)   (A - B) * (C / D)                             --->  A B - C D / *

(ii)  (A + B ^ D) * (E - F) + G                     --->  A B D ^ + E F - * G +

(iii) A *( B + D) / E - F * ( G + H / K)            --->  A B D + * E / F G H K / + * -

(iv)  (A + B) * (C ^ (D - E) + (F/G) ^ (H - J))     --->  A B + C D E - ^ F G / H J - ^ + *


   Infix to prefix conversion :

(i)   (A - B) * (C / D)                             --->  * - A B / C D

(ii)  (A + B ^ D) * (E - F) + G                     --->  + * + A ^ B D - E F G

(iii) A *( B + D) / E - F * ( G + H / K)            --->  - / * A + B D E * F + G / H K

(iv)  (A + B) * (C  ^ (D - E) + (F/ G) ^  (H - J))  --->  A B +



6. Prefix to Infix :

i.    + A - B C                         ---> A + (B - C)

ii.   + + A - * ^ B C D / + E F * G H I ---> (A + (((B ^ C) * D) - ((E + F) / (G * H)))) + I

iii.  + - ^ A B C *D * * E F G          ---> (A ^ B) - C) + D * (G * (E * F))


7. Postfix to Infix:

i. A B +C -                             ---> (A + B) - C

ii. A B C + -                           ---> A - (B + C)

iii. A B - C + D E F - + ^              ---> ((A - B) + C) ^ (D + (E - F))

iv. A B C D E - +  ^  * E F * -         ---> (A * (B ^ ( C + ( D - E )))) + ( E*F )

v. A B + C * D E - - FG+ ^              ---> (((A + B) * C) - (D - E)) ^ ( F + G)

